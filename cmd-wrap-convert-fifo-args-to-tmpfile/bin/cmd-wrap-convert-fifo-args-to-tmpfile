#!/usr/bin/env perl
# SPDX-License-Identifier: CC0-1.0
use strict;
use warnings;
use Getopt::Long;
use File::Temp qw(tempfile tempdir);
use File::Copy qw(copy);
use File::Spec;
use JSON::PP qw(encode_json);

# Parse command line options
Getopt::Long::Configure( qw(auto_help pass_through) );

my @suffixes;
my $dry_run;
GetOptions(
	"suffix=s" => \@suffixes,
	"dry-run"  => \$dry_run,
);

# remove option list terminator
shift @ARGV if @ARGV && $ARGV[0] eq '--';

# Read the original command from the arguments
my @original_command = @ARGV;

die "Missing command..." unless @original_command;

# Create a temporary directory
my $tempdir = $dry_run ? '[TEMP DIR]' : tempdir(CLEANUP => 1);

# Function to convert FIFO to temporary files
sub convert_fifo_to_tempfile {
	my ($fifo, $suffix) = @_;

	(my $clean_name = $fifo) =~ s/[^A-Za-z0-9\-\.]/_/g;
	# Create a temporary file in the temporary directory
	my $tempfile = File::Spec->catfile($tempdir, "fifo_${clean_name}${suffix}");

	unless( $dry_run ) {
		open my $fh, '>', $tempfile or die "Failed to create temporary file $tempfile: $!";

		# Copy the contents of the FIFO to the temporary file
		copy($fifo, $tempfile) or die "Failed to copy $fifo to $tempfile: $!";
	}

	return $tempfile;
}

# Iterate over the command arguments and replace FIFO with temporary files
my @new_command;
my $suffix_index = 0;
foreach my $arg (@original_command) {
	if (-p $arg) {
		my $fifo = $arg;
		my $suffix = $suffixes[$suffix_index] // '';
		push @new_command, convert_fifo_to_tempfile($fifo, $suffix);
		$suffix_index++ if $suffix_index < $#suffixes;
	} else {
		push @new_command, $arg;
	}
}

# Execute the new command and exit with its status
if( $dry_run ) {
	print encode_json({ command => \@new_command }), "\n";
} else {
	exit system(@new_command);
}
__END__

=pod

=head1 NAME

cmd-wrap-convert-fifo-args-to-tmpfile - Convert FIFO arguments to temporary files before executing a command

=head1 SYNOPSIS

cmd-wrap-convert-fifo-args-to-tmpfile [options] command...

Options:

  --suffix=SUFFIX   Specify suffix(es) to append to temporary filenames.
                    Multiple --suffix options can be provided for different FIFOs

  --dry-run         Don't execute command, print JSON with planned conversion

  --help            Print this help message

=head1 DESCRIPTION

This script wraps another command, converting any FIFO (named pipe) arguments to
temporary regular files before executing the command. This is useful when working
with programs that don't handle FIFOs correctly.

Each FIFO argument is copied to a temporary file, which is then passed to the
wrapped command instead of the original FIFO. The temporary files are automatically
cleaned up after the wrapped command exits.

=head1 OPTIONS

=over 4

=item B<--suffix>=I<SUFFIX>

Append the specified suffix to temporary filenames. Can be specified multiple times
to use different suffixes for different FIFOs in order of appearance.

=item B<--dry-run>

Instead of executing the command, output a JSON object showing how the command
would be transformed. Useful for testing.

=item B<--help>

Print usage information.

=back

=head1 EXIT STATUS

Returns the exit status of the wrapped command, or 0 for C<--dry-run>.

=head1 EXAMPLES

  # Convert .fifo to temporary file before running command
  cmd-wrap-convert-fifo-args-to-tmpfile cat <( cmd )

  # Use different suffixes for multiple FIFOs
  cmd-wrap-convert-fifo-args-to-tmpfile --suffix=.in --suffix=.out cmd <( cat input | shuf ) <( cat output | shuf )

=cut
