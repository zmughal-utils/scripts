#!/usr/bin/perl
# SPDX-License-Identifier: CC0-1.0
use strict;
use warnings;
use Getopt::Long;
use File::Temp qw(tempfile tempdir);
use File::Copy qw(copy);
use File::Spec;

# Parse command line options
Getopt::Long::Configure( qw(pass_through) );

my @suffixes;
GetOptions("suffix=s" => \@suffixes);

# Create a temporary directory
my $tempdir = tempdir(CLEANUP => 1);

# Read the original command from the arguments
my @original_command = @ARGV;

# Function to convert /dev/fd/N to temporary files
sub convert_fd_to_tempfile {
    my ($fd, $suffix) = @_;

    (my $clean_name = $fd) =~ s/[^A-Za-z0-9\-\.]/_/g;
    # Create a temporary file in the temporary directory
    my $tempfile = File::Spec->catfile($tempdir, "fd_${clean_name}${suffix}");
    open my $fh, '>', $tempfile or die "Failed to create temporary file $tempfile: $!";

    # Copy the contents of the FIFO to the temporary file
    copy($fd, $tempfile) or die "Failed to copy $fd to $tempfile: $!";

    return $tempfile;
}

# Iterate over the command arguments and replace /dev/fd/N with temporary files
my @new_command;
my $suffix_index = 0;
foreach my $arg (@original_command) {
    if ($arg =~ m|^/dev/fd/\d+$| || -p $arg) {
        my $fd = $arg;
        my $suffix = $suffixes[$suffix_index] // '';
        push @new_command, convert_fd_to_tempfile($fd, $suffix);
        $suffix_index++ if $suffix_index < $#suffixes;
    } else {
        push @new_command, $arg;
    }
}

# Execute the new command and exit with its status
exit system(@new_command);
